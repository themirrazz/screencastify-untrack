{"version":3,"sources":["./deployments/front-ends/record/src/app/drive-proxy.worker.ts"],"names":["self","addEventListener","event","console","log","waitUntil","clients","claim","url","URL","request","origin","location","pathname","startsWith","rUrl","fileId","searchParams","get","cacheBuster","accessToken","downloadUrl","requestHeaders","Object","fromEntries","headers","entries","req","Request","mode","credentials","Authorization","respondWith","fetch"],"mappings":"AA2BAA,KAAKC,iBAAiB,UAAYC,IAChCC,QAAQC,IAAI,2BAA4BF,KAG1CF,KAAKC,iBAAiB,WAAaC,IACjCA,EAAMG,UAAWL,KAAaM,QAAQC,SACtCJ,QAAQC,IAAI,iCAAkCF,KAQhDF,KAAKC,iBAAiB,QAAUC,IAE9B,MAAMM,EAAM,IAAIC,IAAIP,EAAMQ,QAAQF,KAClC,GACEA,EAAIG,SAAWX,KAAKY,SAASD,QAC7BH,EAAIK,SAASC,WAAW,eACxB,CACAX,QAAQC,IAAI,6BAA8BF,EAAMQ,QAAQF,KACxD,MAAMO,EAAO,IAAIN,IAAIP,EAAMQ,QAAQF,KAC7BQ,EAASD,EAAKE,aAAaC,IAAI,UAC/BC,EAAcJ,EAAKE,aAAaC,IAAI,gBACpCE,EAAcL,EAAKE,aAAaC,IAAI,gBACpCG,EAAc,6CAA6CL,8CAAmDG,IAC9GG,EAAiBC,OAAOC,YAAYtB,EAAMQ,QAAQe,QAAQC,WAC1DC,EAAM,IAAIC,QAAQP,EAAa,CACnCQ,KAAM,OACNC,YAAa,OACbL,QAAS,OAAF,wBACFH,GAAc,CACjBS,cAAe,UAAYX,MAG/BlB,EAAM8B,YACJC,MAAMN","file":"631.js","sourcesContent":["/*!\n * Copyright 2021 Screencastify LLC\n */\n\n/// <reference lib=\"webworker\" />\n/// <reference lib=\"es2019\" />\n\n// TODO: use service worker typings and get rid of any hacks\n// https://github.com/angular/angular/blob/master/packages/service-worker/worker/src/service-worker.d.ts\n\n/* eslint-disable no-console */\n\n/**\n * @fileoverview\n * Simple client-side service worker that implements a proxy to retreive files\n * from google drive.\n *\n * GET /driveProxy/ignoredFoo\n * with the following query parameters:\n * - fileId: drive file id\n * - access_token: google oauth token\n * - cache_buster: optional cache-buster this is just appended as a query\n * parameter to the request made to the drive API.\n *\n * => responds with drive.files.get() media response for given file id.\n */\n\nself.addEventListener('install', (event) => {\n  console.log('Service Worker installed', event);\n});\n\nself.addEventListener('activate', (event: any) => {\n  event.waitUntil((self as any).clients.claim());\n  console.log('Service Worker claimed clients', event);\n});\n\n/**\n * Proxy that allows to retrive drive files with an authorization header\n * instead of passing in a token in the URL.\n * See https://trello.com/c/qzkAZSrK\n */\nself.addEventListener('fetch', (event: any) => {\n  // Skip all requests except those for the /driveProxy url.\n  const url = new URL(event.request.url);\n  if (\n    url.origin === self.location.origin &&\n    url.pathname.startsWith('/driveProxy')\n  ) {\n    console.log('Service Worker got request', event.request.url);\n    const rUrl = new URL(event.request.url);\n    const fileId = rUrl.searchParams.get('fileId');\n    const cacheBuster = rUrl.searchParams.get('cache_buster');\n    const accessToken = rUrl.searchParams.get('access_token');\n    const downloadUrl = `https://www.googleapis.com/drive/v2/files/${fileId}?alt=media&source=downloadUrl&cacheBuster=${cacheBuster}`;\n    const requestHeaders = Object.fromEntries(event.request.headers.entries());\n    const req = new Request(downloadUrl, {\n      mode: 'cors',\n      credentials: 'omit',\n      headers: {\n        ...requestHeaders,\n        Authorization: 'Bearer ' + accessToken,\n      },\n    });\n    event.respondWith(\n      fetch(req),\n      // Note: in theory we could use the logic below to cache responses longer,\n      // but that does not seem to support aborting requests (yet?), e.g while\n      // seeking.\n      // fetch(req).then(resp => {\n      //   let headers = Object.fromEntries(resp.headers.entries());\n      //   console.log('response headers', headers);\n      //   headers['cache-control'] = 'private, max-age=3600';\n      //   delete headers['expires'];\n\n      //   return new Response(resp.body, {\n      //     status: resp.status,\n      //     statusText: resp.statusText,\n      //     headers: {\n      //       ...headers,\n      //     },\n      //   });\n      // }),\n    );\n  }\n});\n"],"sourceRoot":"webpack:///"}